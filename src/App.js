import React, { useState, useEffect } from 'react';
import { Share } from '@capacitor/share';
import { LocalNotifications } from '@capacitor/local-notifications';
import { Device } from '@capacitor/device';
import './App.css';

function App() {
  const [birthdate, setBirthdate] = useState('');
  const [daysLeft, setDaysLeft] = useState(null);
  const [batteryLevel, setBatteryLevel] = useState('ƒêang ki·ªÉm tra...');

  // Kh·ªüi t·∫°o Local Notifications
  useEffect(() => {
    LocalNotifications.requestPermissions();
  }, []);

  // L·∫•y th√¥ng tin pin
  useEffect(() => {
    const getBatteryInfo = async () => {
      try {
        const info = await Device.getBatteryInfo();
        if (info.batteryLevel !== undefined) {
          setBatteryLevel(`${Math.round(info.batteryLevel * 100)}%`);
        } else {
          setBatteryLevel('Kh√¥ng kh·∫£ d·ª•ng');
        }
      } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin pin:', error);
        setBatteryLevel('Kh√¥ng kh·∫£ d·ª•ng');
      }
    };
    getBatteryInfo();
  }, []);

  const isValidDate = (dateString) => {
    if (!dateString.match(/^\d{2}\/\d{2}$/)) {
      return false;
    }
  
    const [day, month] = dateString.split('/').map(Number);
    
    // Ki·ªÉm tra th√°ng h·ª£p l·ªá (1-12)
    if (month < 1 || month > 12) {
      return false;
    }
  
    // Ki·ªÉm tra ng√†y h·ª£p l·ªá theo th√°ng
    const daysInMonth = [
      31, // Th√°ng 1
      (new Date().getFullYear() % 4 === 0) ? 29 : 28, // Th√°ng 2 (t√≠nh c·∫£ nƒÉm nhu·∫≠n)
      31, 30, 31, 30, 31, 31, 30, 31, 30, 31 // C√°c th√°ng c√≤n l·∫°i
    ];
  
    return day > 0 && day <= daysInMonth[month - 1];
  };
  

  const calculateDaysLeft = (date) => {
    const [day, month] = date.split('/').map(Number);
    const today = new Date();
    let nextBirthday = new Date(today.getFullYear(), month - 1, day);

    if (nextBirthday < today) {
      nextBirthday.setFullYear(today.getFullYear() + 1);
    }

    const diffTime = nextBirthday - today;
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  const handleCalculate = async () => {
    if (!birthdate) {
      alert('Vui l√≤ng nh·∫≠p ng√†y sinh!');
      return;
    }
    if (!isValidDate(birthdate)) {
      alert('Ng√†y sinh kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng dd/mm v√† ƒë·∫£m b·∫£o ng√†y th√°ng t·ªìn t·∫°i');
      return;
    }

    const days = calculateDaysLeft(birthdate);
    setDaysLeft(days);

    // Hi·ªÉn th·ªã th√¥ng b√°o
    await LocalNotifications.schedule({
      notifications: [
        {
          title: 'ƒê·∫øm ng∆∞·ª£c sinh nh·∫≠t',
          body: `C√≤n ${days} ng√†y ƒë·∫øn sinh nh·∫≠t c·ªßa b·∫°n!`,
          id: 1,
          schedule: { at: new Date(Date.now() + 1000) },
        }
      ]
    });
  };

  const handleShare = async () => {
    if (daysLeft === null) {
      alert('Vui l√≤ng t√≠nh to√°n s·ªë ng√†y tr∆∞·ªõc khi chia s·∫ª');
      return;
    }

    try {
      await Share.share({
        title: 'ƒê·∫øm ng∆∞·ª£c sinh nh·∫≠t',
        text: `C√≤n ${daysLeft} ng√†y n·ªØa l√† ƒë·∫øn sinh nh·∫≠t c·ªßa t√¥i! üéâ`,
        dialogTitle: 'Chia s·∫ª ƒë·∫øm ng∆∞·ª£c sinh nh·∫≠t'
      });
    } catch (error) {
      alert('Ch·ª©c nƒÉng chia s·∫ª kh√¥ng kh·∫£ d·ª•ng tr√™n thi·∫øt b·ªã n√†y');
    }
  };

  return (
    <div className="app-container">
      <h1>ƒê·∫øm ng∆∞·ª£c sinh nh·∫≠t</h1>
      
      <div className="input-group">
        <input
          type="text"
          placeholder="Nh·∫≠p ng√†y sinh (dd/mm)"
          value={birthdate}
          onChange={(e) => setBirthdate(e.target.value)}
          className={!birthdate || isValidDate(birthdate) ? '' : 'invalid-input'}
        />
        <button onClick={handleCalculate}>T√≠nh to√°n</button>
      </div>
      {!birthdate || isValidDate(birthdate) ? null : (
        <p className="error-message">Ng√†y kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng dd/mm</p>
      )}

      {daysLeft !== null && (
        <div className="result">
          <p>C√≤n <span className="days">{daysLeft}</span> ng√†y ƒë·∫øn sinh nh·∫≠t ti·∫øp theo!</p>
          <button onClick={handleShare}>Chia s·∫ª k·∫øt qu·∫£</button>
        </div>
      )}

      <div className="battery-status">
        <p>M·ª©c pin hi·ªán t·∫°i: {batteryLevel}</p>
      </div>
    </div>
  );
}

export default App;